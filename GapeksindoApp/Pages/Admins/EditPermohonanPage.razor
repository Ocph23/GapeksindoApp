@layout Layouts.AdminLayout
@page "/admin/permohonan/{id:int}"

@using Microsoft.AspNetCore.Identity
@inject IVersionProvider VersionProvider
@inject UserManager<IdentityUser> _userManager;
@inject ApplicationDbContext dbcontext
@inject IMessageService MessageService
@inject IJSRuntime JS
@inject IWebHostEnvironment Environment

<Heading Size="HeadingSize.Is1" Margin="Margin.Is3.FromBottom">@title</Heading>

<Card>
    <CardBody>
        <div class="row mb-2">
            <div class="col">
            </div>
            <div class="col" style="display: flex; justify-content:end">
                <Button Clicked="@UpdateProfile" class="btn btn-secondary"
                    Disabled="@(model.DataKualifikasi.Count<=0)">Update Permohonan</Button>
            </div>
        </div>
        <div class="row">
            <div class="col-6">
                <div class="form-floating mb-2">
                    <DatePicker DisplayFormat="dd/MM/yyyy" @bind-Date="@model.Tanggal"></DatePicker>
                    <label>Tanggal Pengajuan</label>
                </div>
                <div class="form-floating mb-2">
                    <TextEdit @bind-Text="@model.Nomor"></TextEdit>
                    <label>Nomor</label>
                </div>
                <div class="form-floating mb-2">
                    <Select TValue="StatusPermohonan" @bind-SelectedValue="@model.Status">
                        @foreach (var item in GetStatusPermohonans(model))
                        {
                            <SelectItem Value="@item">@item</SelectItem>
                        }
                    </Select>
                    <label>Status</label>
                </div>
                <div class="form-floating mb-2">
                    <MemoEdit @bind-Text="@model.Keterangan"></MemoEdit>
                    <label>Catatan</label>
                </div>
                @if(model.Status==StatusPermohonan.Verifikasi){
                    <div class="form-floating mb-2">
                    <DatePicker DisplayFormat="dd/MM/yyyy" @bind-Date="@model.TanggalDitetapkan"></DatePicker>
                    <label>Tanggal Ditetapkan</label>
                </div>
                }
            </div>
        </div>
        <div class="row mt-4">
            <div style="display:flex; justify-content: space-between;">
                <Heading Size="HeadingSize.Is5" Margin="Margin.Is3.FromBottom">Data Kualifikasi</Heading>
            </div>
            <DataGrid TItem="Kualifikasi" Data="@model.DataKualifikasi">
                <DataGridColumn Field="@nameof(Persyaratan.Id)" Caption="#" Sortable="false">
                    <DisplayTemplate>
                        @context.Id.ToString("D4")
                    </DisplayTemplate>
                </DataGridColumn>
                <DataGridColumn Field="@nameof(Persyaratan.Nama)" Caption="Nama" Editable />
                <DataGridColumn Field="@nameof(Persyaratan.Keterangan)" Caption="Keterangan" Editable />
            </DataGrid>
        </div>

        @if (model.Id > 0)
        {
            <div class="row" style="margin-top: 50px;">
                <div style="display:flex; justify-content: space-between;">
                    <Heading Size="HeadingSize.Is5" Margin="Margin.Is3.FromBottom">Data Persyaratan</Heading>
                </div>
                <table class="table" style="max-width: 100%;">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Nama Persyaratan</th>
                            <th scope="col" style="width:150px">Aksi</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in model.DataPersyaratan)
                        {
                            <tr>
                                <th scope="row">1</th>
                                <td>@item.Persyaratan.Nama</td>
                                <td>
                                    @if (item.Persyaratan.IsUpload)
                                    {
                                        @if (!string.IsNullOrEmpty(item.FileNama))
                                        {
                                            <Icon style="margin: 1px;" TextColor="TextColor.Danger" Clicked="@(()=>Preview(item))"
                                IconSize="IconSize.Large" Name="IconName.FilePdf" />
                                        }
                                    }
                                    else
                                    {
                                        <Check TValue="bool" Checked="@item.Status" Disabled></Check>
                                    }
                                </td>
                                <td>
                                    <Check TValue="bool" Checked="@item.Validate"
                                CheckedChanged="@((x)=> UpdateCheckPersyaratan(x,item))"></Check>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </CardBody>
</Card>



<Modal @ref="modalPreview">
    <ModalContent Size="ModalSize.Fullscreen" Centered>
        <ModalHeader>
            <ModalTitle>Preview Document</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <iframe style="width: 100%; height:100%" src="@($"/files/{selectedFile}")"></iframe>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="@(()=>modalPreview.Hide())">Close</Button>
        </ModalFooter>
    </ModalContent>
</Modal>




@code {

    string title = "Tambah";
    [Parameter] public int Id { get; set; }

    [Inject] AuthenticationStateProvider AuthenticationStateProvider { get; set; }
    [Inject] NavigationManager navManager { get; set; }
    Permohonan model = new Permohonan() { Status = StatusPermohonan.Baru };
    ICollection<Kualifikasi> dataKualifikasi = new List<Kualifikasi>();
    private Modal modalRef;
    private Modal modalPreview;
    DataPersyaratan selectedPersyaratan;
    private int selectKualifikasi;
    private string selectedFile;

    protected override async Task OnInitializedAsync()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var userData = await _userManager.FindByNameAsync(user.Identity.Name);
        }

        if (Id > 0)
        {
            title = "Edit";
            var tempModel = await dbcontext.Permohonans
            .Include(x => x.DataPersyaratan).ThenInclude(x => x.Persyaratan)
            .Include(x => x.DataKualifikasi)
            .SingleOrDefaultAsync(x => x.Id == Id);
            if (tempModel != null)
                model = tempModel;
        }
        else
        {
            foreach (var item in dbcontext.Persyaratans.ToList())
            {
                model.DataPersyaratan.Add(new DataPersyaratan() { Persyaratan = item });
            }
        }
    }

    Task Preview(DataPersyaratan data)
    {
        selectedFile = data.FileNama;
        modalPreview.Show();
        return Task.CompletedTask;
    }
    async Task UpdateCheckPersyaratan(bool x, DataPersyaratan data)
    {
        data.Validate = x;
        dbcontext.Update(data);
        await dbcontext.SaveChangesAsync();
    }
    Task closeKualifikasiModal()
    {
        return modalRef.Hide();
    }


    async Task UpdateProfile()
    {
        if (await MessageService.Confirm("Yakin Update Data ?", "Update"))
        {

            if (model.Id <= 0)
            {
                await dbcontext.Permohonans.AddAsync(model);
            }
            await dbcontext.SaveChangesAsync();
        }
    }

    ICollection<StatusPermohonan> GetStatusPermohonans(Permohonan model)
    {
        var datas = Enum.GetValues(typeof(StatusPermohonan)).Cast<StatusPermohonan>();
        return datas.ToList();
    }

}
